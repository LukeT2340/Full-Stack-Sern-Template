{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useAuthContext } from './useAuthContext';\nexport const useSignup = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const {\n    dispatch\n  } = useAuthContext();\n  const signup = async (username, email, password1, password2) => {\n    setIsLoading(true);\n    setError(null);\n    const trimmedUsername = username.trim();\n    const trimmedEmail = email.trim();\n    const trimmedPassword1 = password1.trim();\n    const trimmedPassword2 = password2.trim();\n    const usernameRegex = /^[a-zA-Z0-9]*$/;\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\n    // Handle username not long enough\n    if (trimmedUsername.length < 5) {\n      setError(\"Usernames must be five or more characters.\");\n      setIsLoading(false);\n      return;\n    }\n\n    // Handle username contains special characters\n    if (!usernameRegex.test(trimmedUsername)) {\n      setError(\"Usernames must only contain letters and numbers.\");\n      setIsLoading(false);\n      return;\n    }\n\n    // Handle passwords don't match\n    if (trimmedPassword1 !== trimmedPassword2) {\n      setError(\"Passwords don't match\");\n      setIsLoading(false);\n      return;\n    }\n\n    // Handle username doesn't meet complexity requirements\n    if (!passwordRegex.test(trimmedPassword1)) {\n      setError(\"Your password must contain at least one lowercase letter, one uppercase letter, one digit, one special character, and be at least 8 characters long.\");\n      setIsLoading(false);\n      return;\n    }\n    const userData = {\n      username: trimmedUsername,\n      password: trimmedPassword1,\n      email: trimmedEmail\n    };\n    const response = await fetch('http://127.0.0.1:3002/user/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n\n    // Handle unsuccessful sign up\n    if (!response.ok) {\n      const errorData = await response.json();\n      setIsLoading(false);\n      setError(errorData.errorMessage || 'Unknown server error. Please try again later.');\n    }\n\n    // Handle successful sign up\n    if (response.ok) {\n      const json = await response.json();\n\n      // Save the use to local storage\n      localStorage.setItem('user', JSON.stringify(json));\n      // Update auth context\n      dispatch({\n        type: 'LOGIN',\n        payload: json\n      });\n      setIsLoading(false);\n    }\n  };\n  return {\n    signup,\n    isLoading,\n    error\n  };\n};\n_s(useSignup, \"2o2oUdrJP220M1JG8l7hQABh7Ks=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","useAuthContext","useSignup","_s","error","setError","isLoading","setIsLoading","dispatch","signup","username","email","password1","password2","trimmedUsername","trim","trimmedEmail","trimmedPassword1","trimmedPassword2","usernameRegex","passwordRegex","length","test","userData","password","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","errorMessage","localStorage","setItem","type","payload"],"sources":["/Users/lukethompson/Documents/Blogger/blog/src/hooks/useSignup.js"],"sourcesContent":["import { useState } from 'react';\nimport { useAuthContext } from './useAuthContext';\n\nexport const useSignup = () => {\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(null);\n    const { dispatch } = useAuthContext();\n\n    const signup = async(username, email, password1, password2) => {\n        setIsLoading(true);\n        setError(null);\n\n        const trimmedUsername = username.trim();\n        const trimmedEmail = email.trim();\n        const trimmedPassword1 = password1.trim();\n        const trimmedPassword2 = password2.trim();\n        const usernameRegex = /^[a-zA-Z0-9]*$/;\n        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\n        // Handle username not long enough\n        if (trimmedUsername.length < 5) {\n            setError(\"Usernames must be five or more characters.\");\n            setIsLoading(false);\n            return;\n        }\n\n        // Handle username contains special characters\n        if (!usernameRegex.test(trimmedUsername)) {\n            setError(\"Usernames must only contain letters and numbers.\");\n            setIsLoading(false);\n            return;\n        }\n\n        // Handle passwords don't match\n        if (trimmedPassword1 !== trimmedPassword2) {\n            setError(\"Passwords don't match\");\n            setIsLoading(false);\n            return;\n        }\n\n        // Handle username doesn't meet complexity requirements\n        if (!passwordRegex.test(trimmedPassword1)) {\n            setError(\"Your password must contain at least one lowercase letter, one uppercase letter, one digit, one special character, and be at least 8 characters long.\");\n            setIsLoading(false);\n            return;\n        }\n\n        const userData = {\n            username: trimmedUsername,\n            password: trimmedPassword1,\n            email: trimmedEmail\n        };\n\n        const response = await fetch('http://127.0.0.1:3002/user/signup', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n        });\n\n        // Handle unsuccessful sign up\n        if (!response.ok) {\n            const errorData = await response.json();\n            setIsLoading(false);\n            setError(errorData.errorMessage || 'Unknown server error. Please try again later.');\n            \n        }\n\n        // Handle successful sign up\n        if (response.ok) {\n            const json = await response.json();\n            \n            // Save the use to local storage\n            localStorage.setItem('user', JSON.stringify(json));\n            // Update auth context\n            dispatch({type: 'LOGIN', payload: json});\n        \n            setIsLoading(false);\n        }\n    }\n\n    return { signup, isLoading, error };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM;IAAEQ;EAAS,CAAC,GAAGP,cAAc,CAAC,CAAC;EAErC,MAAMQ,MAAM,GAAG,MAAAA,CAAMC,QAAQ,EAAEC,KAAK,EAAEC,SAAS,EAAEC,SAAS,KAAK;IAC3DN,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,MAAMS,eAAe,GAAGJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACvC,MAAMC,YAAY,GAAGL,KAAK,CAACI,IAAI,CAAC,CAAC;IACjC,MAAME,gBAAgB,GAAGL,SAAS,CAACG,IAAI,CAAC,CAAC;IACzC,MAAMG,gBAAgB,GAAGL,SAAS,CAACE,IAAI,CAAC,CAAC;IACzC,MAAMI,aAAa,GAAG,gBAAgB;IACtC,MAAMC,aAAa,GAAG,sEAAsE;;IAE5F;IACA,IAAIN,eAAe,CAACO,MAAM,GAAG,CAAC,EAAE;MAC5BhB,QAAQ,CAAC,4CAA4C,CAAC;MACtDE,YAAY,CAAC,KAAK,CAAC;MACnB;IACJ;;IAEA;IACA,IAAI,CAACY,aAAa,CAACG,IAAI,CAACR,eAAe,CAAC,EAAE;MACtCT,QAAQ,CAAC,kDAAkD,CAAC;MAC5DE,YAAY,CAAC,KAAK,CAAC;MACnB;IACJ;;IAEA;IACA,IAAIU,gBAAgB,KAAKC,gBAAgB,EAAE;MACvCb,QAAQ,CAAC,uBAAuB,CAAC;MACjCE,YAAY,CAAC,KAAK,CAAC;MACnB;IACJ;;IAEA;IACA,IAAI,CAACa,aAAa,CAACE,IAAI,CAACL,gBAAgB,CAAC,EAAE;MACvCZ,QAAQ,CAAC,sJAAsJ,CAAC;MAChKE,YAAY,CAAC,KAAK,CAAC;MACnB;IACJ;IAEA,MAAMgB,QAAQ,GAAG;MACbb,QAAQ,EAAEI,eAAe;MACzBU,QAAQ,EAAEP,gBAAgB;MAC1BN,KAAK,EAAEK;IACX,CAAC;IAED,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;MAClEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;IAC7B,CAAC,CAAC;;IAEF;IACA,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC3B,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAAC4B,SAAS,CAACE,YAAY,IAAI,+CAA+C,CAAC;IAEvF;;IAEA;IACA,IAAIV,QAAQ,CAACO,EAAE,EAAE;MACb,MAAME,IAAI,GAAG,MAAMT,QAAQ,CAACS,IAAI,CAAC,CAAC;;MAElC;MACAE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACC,SAAS,CAACG,IAAI,CAAC,CAAC;MAClD;MACA1B,QAAQ,CAAC;QAAC8B,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEL;MAAI,CAAC,CAAC;MAExC3B,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,OAAO;IAAEE,MAAM;IAAEH,SAAS;IAAEF;EAAM,CAAC;AACvC,CAAC;AAACD,EAAA,CAhFWD,SAAS;EAAA,QAGGD,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}