{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport const GetCart = () => {\n  _s();\n  const [cartEntries, setCartEntries] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n\n  // Merges cart entries that are of the same product\n  const mergeCartEntries = cartEntries => {\n    // Create an object to store merged cart entries\n    let mergedCart = {};\n\n    // Iterate over each cart entry\n    cartEntries.forEach(entry => {\n      // Check if product ID already exists in mergedCart\n      if (entry.product_id in mergedCart) {\n        // If yes, update quantity\n        mergedCart[entry.product_id].quantity += entry.quantity;\n      } else {\n        // If not, add new entry to mergedCart\n        mergedCart[entry.product_id] = {\n          ...entry\n        }; // Create a shallow copy of the entry\n      }\n    });\n\n    // Convert mergedCart object back to array\n    return Object.values(mergedCart);\n  };\n\n  // Fetches cart using API\n  const getCart = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    // Retrieve token from storage\n    const userJson = localStorage.getItem('user');\n    const user = JSON.parse(userJson);\n    const token = user.token;\n\n    // Attempt to retrieve cart\n    try {\n      const response = await fetch(`http://192.168.1.145:3002/cart/get`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          // Attach token in header for authentication\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Handle unsuccessful fetch\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.errorMessage || 'Unknown server error. Please try again later.');\n      }\n\n      // Handle successful fetch\n      if (response.ok) {\n        const json = await response.json();\n        const cartEntries = mergeCartEndries(json);\n        setCartEntries(cartEntries);\n      }\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    getCart,\n    cartEntries,\n    isLoading,\n    error\n  };\n};\n_s(GetCart, \"ec/8+scYxtlNMxwbEReUOEznt24=\");\n_c = GetCart;\nvar _c;\n$RefreshReg$(_c, \"GetCart\");","map":{"version":3,"names":["useState","GetCart","_s","cartEntries","setCartEntries","error","setError","isLoading","setIsLoading","mergeCartEntries","mergedCart","forEach","entry","product_id","quantity","Object","values","getCart","userJson","localStorage","getItem","user","JSON","parse","token","response","fetch","method","headers","ok","errorData","json","Error","errorMessage","mergeCartEndries","message","_c","$RefreshReg$"],"sources":["/Users/lukethompson/Documents/FullStackProject/frontend/src/hooks/GetCart.js"],"sourcesContent":["import { useState } from 'react';\n\nexport const GetCart = () => {\n    const [cartEntries, setCartEntries] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(null);\n\n    // Merges cart entries that are of the same product\n    const mergeCartEntries = (cartEntries) => {\n        // Create an object to store merged cart entries\n        let mergedCart = {};\n    \n        // Iterate over each cart entry\n        cartEntries.forEach(entry => {\n            // Check if product ID already exists in mergedCart\n            if (entry.product_id in mergedCart) {\n                // If yes, update quantity\n                mergedCart[entry.product_id].quantity += entry.quantity;\n            } else {\n                // If not, add new entry to mergedCart\n                mergedCart[entry.product_id] = { ...entry }; // Create a shallow copy of the entry\n            }\n        });\n    \n        // Convert mergedCart object back to array\n        return Object.values(mergedCart);\n    };\n    \n\n    // Fetches cart using API\n    const getCart = async() => {\n        setIsLoading(true);\n        setError(null);\n\n        // Retrieve token from storage\n        const userJson = localStorage.getItem('user');\n        const user = JSON.parse(userJson);\n        const token = user.token;\n\n        // Attempt to retrieve cart\n        try {\n            const response = await fetch(`http://192.168.1.145:3002/cart/get`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${token}`, // Attach token in header for authentication\n                'Content-Type': 'application/json'\n            }\n            });\n\n            // Handle unsuccessful fetch\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.errorMessage || 'Unknown server error. Please try again later.');\n            }\n\n            // Handle successful fetch\n            if (response.ok) {\n                const json = await response.json();\n                const cartEntries = mergeCartEndries(json);\n                setCartEntries(cartEntries);\n            }\n        } catch (error) {\n            setError(error.message);\n        } finally {\n            setIsLoading(false);\n        }\n\n    }\n\n    return { getCart, cartEntries, isLoading, error };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAMS,gBAAgB,GAAIN,WAAW,IAAK;IACtC;IACA,IAAIO,UAAU,GAAG,CAAC,CAAC;;IAEnB;IACAP,WAAW,CAACQ,OAAO,CAACC,KAAK,IAAI;MACzB;MACA,IAAIA,KAAK,CAACC,UAAU,IAAIH,UAAU,EAAE;QAChC;QACAA,UAAU,CAACE,KAAK,CAACC,UAAU,CAAC,CAACC,QAAQ,IAAIF,KAAK,CAACE,QAAQ;MAC3D,CAAC,MAAM;QACH;QACAJ,UAAU,CAACE,KAAK,CAACC,UAAU,CAAC,GAAG;UAAE,GAAGD;QAAM,CAAC,CAAC,CAAC;MACjD;IACJ,CAAC,CAAC;;IAEF;IACA,OAAOG,MAAM,CAACC,MAAM,CAACN,UAAU,CAAC;EACpC,CAAC;;EAGD;EACA,MAAMO,OAAO,GAAG,MAAAA,CAAA,KAAW;IACvBT,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;;IAEd;IACA,MAAMY,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC7C,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;IACjC,MAAMM,KAAK,GAAGH,IAAI,CAACG,KAAK;;IAExB;IACA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,oCAAmC,EAAE;QACnEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,eAAe,EAAG,UAASJ,KAAM,EAAC;UAAE;UACpC,cAAc,EAAE;QACpB;MACA,CAAC,CAAC;;MAEF;MACA,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;QACd,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,YAAY,IAAI,+CAA+C,CAAC;MAC9F;;MAEA;MACA,IAAIR,QAAQ,CAACI,EAAE,EAAE;QACb,MAAME,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClC,MAAM5B,WAAW,GAAG+B,gBAAgB,CAACH,IAAI,CAAC;QAC1C3B,cAAc,CAACD,WAAW,CAAC;MAC/B;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC8B,OAAO,CAAC;IAC3B,CAAC,SAAS;MACN3B,YAAY,CAAC,KAAK,CAAC;IACvB;EAEJ,CAAC;EAED,OAAO;IAAES,OAAO;IAAEd,WAAW;IAAEI,SAAS;IAAEF;EAAM,CAAC;AACrD,CAAC;AAACH,EAAA,CApEWD,OAAO;AAAAmC,EAAA,GAAPnC,OAAO;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}